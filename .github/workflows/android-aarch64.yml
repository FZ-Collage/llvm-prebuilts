
name: Build LLVM Android (aarch64) 

on:
  push:
    branches:
      - run-actions
      - android-actions
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

env:
  LLVM_VERSION: "22.0.0git"
  ANDROID_API_LEVEL: 31
  ANDROID_ABI: arm64-v8a
  ANDROID_PLATFORM: android-31
  ANDROID_HOST: aarch64-linux-android

jobs:
  build-llvm-android-aarch64:
    runs-on: windows-2025

    steps:
      - name: Maximum Aggressive Disk Cleanup
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Starting maximum aggressive disk cleanup..." -ForegroundColor Cyan

          function Get-FreeSpaceGB($drive) {
              $fs = Get-PSDrive -Name $drive
              if ($fs) { return [math]::Round($fs.Free/1GB,2) } else { return 0 }
          }

          $before = Get-FreeSpaceGB C
          Write-Host "Free space before cleanup: $before GB" -ForegroundColor Yellow

          # ------------------------------
          # 1. TEMP directories
          # ------------------------------
          Remove-Item -Recurse -Force $env:TEMP\* -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force C:\Windows\Temp\* -ErrorAction SilentlyContinue

          # ------------------------------
          # 2. NuGet, NPM, pip, .NET caches
          # ------------------------------
          try { nuget locals all -clear } catch {}
          try { npm cache clean --force } catch {}
          try { python -m pip cache purge } catch {}
          try { dotnet nuget locals all --clear } catch {}

          # ------------------------------
          # 3. Old .NET SDKs (keep latest)
          # ------------------------------
          $sdks = Get-ChildItem "C:\Program Files\dotnet\sdk" -Directory -ErrorAction SilentlyContinue
          if ($sdks.Count -gt 1) {
              $keep = $sdks | Sort-Object LastWriteTime -Descending | Select-Object -First 1
              foreach ($sdk in $sdks) {
                  if ($sdk.FullName -ne $keep.FullName) {
                      Remove-Item -Recurse -Force $sdk.FullName -ErrorAction SilentlyContinue
                  }
              }
          }

          # ------------------------------
          # 4. Android SDKs / NDK / Emulator
          # ------------------------------
          $androidPaths = @(
              "C:\ProgramData\Android",
              "$env:LOCALAPPDATA\Android",
              "$env:USERPROFILE\AppData\Local\Android"
          )
          foreach ($path in $androidPaths) {
              if (Test-Path $path) {
                  Remove-Item -Recurse -Force $path -ErrorAction SilentlyContinue
              }
          }

          # ------------------------------
          # 5. Node global modules
          # ------------------------------
          $nodeModules = "$env:APPDATA\npm\node_modules"
          if (Test-Path $nodeModules) { Remove-Item -Recurse -Force $nodeModules -ErrorAction SilentlyContinue }

          # ------------------------------
          # 6. Chocolatey caches/packages
          # ------------------------------
          $chocoPaths = @(
              "C:\ProgramData\chocolatey\lib-bkp",
              "C:\ProgramData\chocolatey\lib\*.nupkg"
          )
          foreach ($path in $chocoPaths) {
              if (Test-Path $path) { Remove-Item -Recurse -Force $path -ErrorAction SilentlyContinue }
          }

          # ------------------------------
          # 8. Browser caches
          # ------------------------------
          $browserCaches = @(
              "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache",
              "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache"
          )
          foreach ($cache in $browserCaches) {
              if (Test-Path $cache) { Remove-Item -Recurse -Force $cache -ErrorAction SilentlyContinue }
          }

          # ------------------------------
          # 9. Windows Installer / Patch Cache
          # ------------------------------
          $patchCache = "C:\Windows\Installer\$PatchCache$"
          if (Test-Path $patchCache) { Remove-Item -Recurse -Force "$patchCache\*" -ErrorAction SilentlyContinue }

          # ------------------------------
          # 10. Logs / Telemetry
          # ------------------------------
          $logPaths = @(
              "C:\ProgramData\Microsoft\VisualStudio\Logs",
              "C:\ProgramData\Microsoft\Windows\WER"
          )
          foreach ($log in $logPaths) {
              if (Test-Path $log) { Remove-Item -Recurse -Force $log -ErrorAction SilentlyContinue }
          }

          # ------------------------------
          # 11. Docker cleanup (if installed)
          # ------------------------------
          if (Get-Command docker -ErrorAction SilentlyContinue) {
              try { docker system prune -af } catch {}
              try { docker volume prune -f } catch {}
          }

          # ------------------------------
          # 12. Windows Update cache
          # ------------------------------
          try {
              Stop-Service wuauserv -Force
              Remove-Item -Recurse -Force C:\Windows\SoftwareDistribution\Download\* -ErrorAction SilentlyContinue
              Start-Service wuauserv
          } catch {}

          # ------------------------------
          # Done
          # ------------------------------
          $after = Get-FreeSpaceGB C
          $freed = [math]::Round($after - $before,2)
          Write-Host "Free space after cleanup: $after GB" -ForegroundColor Green
          Write-Host "Total space reclaimed: $freed GB" -ForegroundColor Green
          Write-Host "Maximum aggressive disk cleanup completed!" -ForegroundColor Cyan

          # Ensure exit code 0
          exit 0

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          repository: ZeunO8/llvm-project
          ref: c-index-workaround

      - name: Write fix_format_security script to file
        shell: bash
        run: |
          cat << 'EOF' > fix_format_security.py
          #!/usr/bin/env python3
          import sys
          import os
          import re

          def fix_file(path):
              with open(path, 'rb') as f:
                  content = f.read()
              fixed_content = re.sub(rb'-Wformat\s+=format-security', b'-Wformat-security', content)
              if fixed_content != content:
                  backup_path = path + '.bak'
                  if not os.path.exists(backup_path):
                      os.rename(path, backup_path)
                  with open(path, 'wb') as f:
                      f.write(fixed_content)
                  print(f'[PATCHED] {path}')

          def main(build_dir):
              for root, _, files in os.walk(build_dir):
                  for file in files:
                      if file.endswith(('.ninja', '.make', '.mk', '.cmake')):
                          fix_file(os.path.join(root, file))

          if __name__ == '__main__':
              if len(sys.argv) != 2:
                  print('Usage: fix_format_security.py <build_dir>')
                  sys.exit(1)
              main(sys.argv[1])
          EOF
          chmod +x fix_format_security.py

      - name: Download and Extract Android NDK (bash)
        shell: bash
        run: |
          export NDK_VERSION=r27c
          export NDK_URL="https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}-windows.zip"
          export NDK_ZIP="ndk.zip"
          export NDK_DIR="$USERPROFILE/ndk/android-ndk-${NDK_VERSION}"

          mkdir -p "$USERPROFILE/ndk"
          curl -fsSL "$NDK_URL" -o "$NDK_ZIP"
          unzip -q "$NDK_ZIP" -d "$USERPROFILE/ndk"
          echo "ANDROID_NDK_ROOT=$NDK_DIR" >> "$GITHUB_ENV"

      - name: Configure LLVM
        run: |
          cd llvm
          cmake -G Ninja -B build -S . \
            -DLLVM_ENABLE_PROJECTS="clang;lld;clang-tools-extra;lldb" \
            -DCMAKE_INSTALL_PREFIX=llvm-${{ env.LLVM_VERSION }}-android-aarch64 \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_HOST_TRIPLE=x86_64-pc-windows-msvc \
            -DLLVM_TARGETS_TO_BUILD="AArch64" \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=$ANDROID_ABI -DANDROID_PLATFORM=$ANDROID_PLATFORM \
            -DLLVM_DEFAULT_TARGET_TRIPLE=aarch64-linux-android \
            -DCMAKE_C_FLAGS="-fPIC" \
            -DCMAKE_CXX_FLAGS="-fPIC" \
            -DCMAKE_EXE_LINKER_FLAGS="-ldl" \
            -DBUILD_SHARED_LIBS=OFF \
            -DLLVM_BUILD_STATIC=ON \
            -DLLDB_ENABLE_PYTHON=OFF \
            -DLLDB_ENABLE_LUA=OFF \
            -DLLDB_ENABLE_LIBXML2=OFF \
            -DLLDB_ENABLE_LZMA=OFF \
            -DLLDB_ENABLE_CURSES=OFF \
            -DLLDB_ENABLE_LIBEDIT=OFF \
            -DLLVM_BUILD_EXAMPLES=OFF -DLLVM_INCLUDE_EXAMPLES=OFF \
            -DLLVM_INCLUDE_DOCS=OFF -DLLVM_INCLUDE_UTILS=OFF \
            -DLLVM_BUILD_TESTS=OFF -DLLVM_INCLUDE_TESTS=OFF \
            -DLLVM_BUILD_BENCHMARKS=OFF -DLLVM_INCLUDE_BENCHMARKS=OFF \
            -DLLVM_ENABLE_ASSERTIONS=OFF -DCLANG_INCLUDE_TESTS=OFF -DLLDB_INCLUDE_TESTS=OFF \
            -DLIBCLANG_BUILD_STATIC=ON -DLLVM_ENABLE_PIC=OFF
        shell: bash

      - name: fix_format_security
        run: |
          python fix_format_security.py llvm/build
        shell: bash

      - name: Build LLVM
        run: |
          cd llvm
          cmake --build build --config Release

      - name: Install LLVM
        run: |
          cd llvm
          cmake --install build

      - name: Package LLVM Install Folder
        shell: bash
        run: |
          cd llvm/llvm-${{ env.LLVM_VERSION }}-android-aarch64
          tar -cvzf ../../llvm-${{ env.LLVM_VERSION }}-android-aarch64.tar.gz *

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: llvm-${{ env.LLVM_VERSION }}-android-aarch64
          path: llvm-${{ env.LLVM_VERSION }}-android-aarch64.tar.gz

