
name: Build LLVM Android (aarch64) 

on:
  push:
    branches:
      - run-actions
      - android-actions
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

env:
  LLVM_VERSION: "22.0.0git"
  ANDROID_API_LEVEL: 31
  ANDROID_ABI: arm64-v8a
  ANDROID_PLATFORM: android-31
  ANDROID_HOST: aarch64-linux-android

jobs:
  build-llvm-android-aarch64:
    runs-on: windows-2025

    steps:
      - name: Ultra Aggressive (Safe) Disk Cleanup
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Starting ultra-aggressive (safe) disk cleanup..." -ForegroundColor Cyan

          function Get-FreeSpaceGB($drive) {
              $fs = Get-PSDrive -Name $drive -ErrorAction SilentlyContinue
              if ($fs) { return [math]::Round($fs.Free/1GB,2) } else { return 0 }
          }

          function Get-FolderSizeMB($path) {
              try {
                  $sum = (Get-ChildItem -LiteralPath $path -Recurse -Force -ErrorAction SilentlyContinue | 
                          Where-Object { -not $_.PSIsContainer } |
                          Measure-Object -Property Length -Sum).Sum
                  if (-not $sum) { return 0 }
                  return [math]::Round($sum / 1MB,2)
              } catch {
                  return 0
              }
          }

          # Config
          $before = Get-FreeSpaceGB C
          Write-Host ("Free space before cleanup: " + $before + " GB") -ForegroundColor Yellow
          $ageDays = 3                # only delete folders last modified older than this
          $minSizeMB = 50             # only delete folders >= this size
          $maxDeletes = 12            # max number of dynamic deletions (safety)
          $deleted = @()

          # Quick safe clear of temps & common caches (fast wins)
          $fastPaths = @(
              $env:TEMP,
              "C:\Windows\Temp",
              "$env:LOCALAPPDATA\Temp",
              "$env:USERPROFILE\AppData\Local\Temp"
          )
          foreach ($p in $fastPaths) {
              if ($p -and (Test-Path $p)) {
                  try {
                      Remove-Item -LiteralPath ($p + "\*") -Recurse -Force -ErrorAction SilentlyContinue
                      Write-Host ("Cleared: " + $p)
                  } catch { Write-Host ("Skipped clearing: " + $p + " -> " + $_) }
              }
          }

          # Standard package/tool caches
          try { nuget locals all -clear } catch {}
          try { npm cache clean --force } catch {}
          try { python -m pip cache purge } catch {}
          try { dotnet nuget locals all --clear } catch {}

          # Target well-known user cache & repo folders (if present)
          $targetPaths = @(
              "$env:USERPROFILE\.nuget\packages",
              "$env:USERPROFILE\.gradle\caches",
              "$env:USERPROFILE\.m2\repository",
              "$env:USERPROFILE\.android",
              "$env:USERPROFILE\.android\avd",
              "$env:USERPROFILE\.dotnet",
              "$env:USERPROFILE\.cache",
              "$env:APPDATA\npm-cache",
              "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache",
              "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache",
              "$env:USERPROFILE\.cache\pip",
              "$env:USERPROFILE\AppData\Local\Temp\nuget*",
              "C:\ProgramData\chocolatey\lib",
              "C:\ProgramData\chocolatey\lib-bkp"
          )

          foreach ($tp in $targetPaths) {
              $expanded = $tp -replace '\\\*$', ''
              try {
                  if (Test-Path $expanded) {
                      # compute size, age and remove if >= threshold OR if path name contains obvious cache keywords
                      $sizeMB = Get-FolderSizeMB $expanded
                      $lastWrite = (Get-Item -LiteralPath $expanded -ErrorAction SilentlyContinue).LastWriteTime
                      $ageOK = $false
                      if ($lastWrite) { $ageOK = ($lastWrite -lt (Get-Date).AddDays(-$ageDays)) }
                      if ($sizeMB -ge $minSizeMB -or $expanded.ToLower().Contains("cache") -or $expanded.ToLower().Contains("gradle") -or $expanded.ToLower().Contains("android") -or $expanded.ToLower().Contains("nuget")) {
                          try {
                              Remove-Item -LiteralPath $expanded -Recurse -Force -ErrorAction SilentlyContinue
                              $deleted += @{ Path = $expanded; SizeMB = $sizeMB }
                              Write-Host ("Removed: " + $expanded + " (" + $sizeMB + " MB)")
                          } catch { Write-Host ("Failed to remove: " + $expanded + " -> " + $_) }
                      } else {
                          Write-Host ("Skipped (small or recent): " + $expanded + " (" + $sizeMB + " MB)")
                      }
                  }
              } catch {}
          }

          # Remove Node global modules (app data & ProgramData)
          $nm1 = "$env:APPDATA\npm\node_modules"
          $nm2 = "C:\ProgramData\nodejs\node_modules" 
          foreach ($nm in @($nm1,$nm2)) {
              if (Test-Path $nm) {
                  $s = Get-FolderSizeMB $nm
                  if ($s -ge 5) {
                      try { Remove-Item -LiteralPath $nm -Recurse -Force -ErrorAction SilentlyContinue; $deleted += @{ Path=$nm; SizeMB=$s }; Write-Host ("Removed: " + $nm + " (" + $s + " MB)") } catch { }
                  }
              }
          }

          # DISM component cleanup (best-effort; may be slow but reclaims WinSxS)
          try {
              Write-Host "Attempting DISM component cleanup (StartComponentCleanup + ResetBase) - best-effort"
              Start-Process -FilePath dism.exe -ArgumentList "/Online","/Cleanup-Image","/StartComponentCleanup" -NoNewWindow -Wait -ErrorAction SilentlyContinue
              Start-Process -FilePath dism.exe -ArgumentList "/Online","/Cleanup-Image","/ResetBase" -NoNewWindow -Wait -ErrorAction SilentlyContinue
          } catch { Write-Host ("DISM cleanup skipped or failed: " + $_) }

          # Run Windows Update download cleanup again (best-effort)
          try {
              Stop-Service wuauserv -Force -ErrorAction SilentlyContinue
              Remove-Item -LiteralPath "C:\Windows\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
              Start-Service wuauserv -ErrorAction SilentlyContinue
              Write-Host "Cleared Windows Update download cache."
          } catch { Write-Host ("Windows Update cache cleanup failed: " + $_) }

          # Docker prune (if present)
          if (Get-Command docker -ErrorAction SilentlyContinue) {
              try { docker system prune -af } catch {}
              try { docker volume prune -f } catch {}
          }

          # Dynamic sweep: search common parent locations for large cache-like folders, delete top N
          $parents = @("C:\ProgramData")
          $candidates = @()
          foreach ($parent in $parents) {
              if (Test-Path $parent) {
                  $children = Get-ChildItem -LiteralPath $parent -Directory -ErrorAction SilentlyContinue
                  foreach ($ch in $children) {
                      # quick filter by name keywords to avoid deleting arbitrary installs
                      $name = $ch.Name.ToLower()
                      if ($name -match "cache|temp|gradle|m2|nuget|android|emulator|avd|node_modules|npm|pip|vscode|jetbrains|sonar|opencover|coverage|msbuild|cmake|clang|llvm|artifacts") {
                          $sizeMB = Get-FolderSizeMB $ch.FullName
                          $lastWrite = $ch.LastWriteTime
                          $ageOK = $false
                          if ($lastWrite) { $ageOK = ($lastWrite -lt (Get-Date).AddDays(-$ageDays)) }
                          if ($sizeMB -ge $minSizeMB -and $ageOK) {
                              $candidates += [PSCustomObject]@{ Path = $ch.FullName; SizeMB = $sizeMB; LastWrite = $lastWrite }
                          }
                      }
                  }
              }
          }

          # sort candidates by size desc and delete up to $maxDeletes
          $toDelete = $candidates | Sort-Object -Property SizeMB -Descending | Select-Object -First $maxDeletes
          foreach ($item in $toDelete) {
              try {
                  Remove-Item -LiteralPath $item.Path -Recurse -Force -ErrorAction SilentlyContinue
                  $deleted += @{ Path = $item.Path; SizeMB = $item.SizeMB }
                  Write-Host ("Dynamically removed: " + $item.Path + " (" + $item.SizeMB + " MB)")
              } catch { Write-Host ("Failed to remove dynamic candidate: " + $item.Path + " -> " + $_) }
          }

          # Final cleanup touches (safe)
          try { Remove-Item -LiteralPath "C:\Windows\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue } catch {}
          try { Remove-Item -LiteralPath "$env:LOCALAPPDATA\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue } catch {}

          # Report
          $after = Get-FreeSpaceGB C
          $freed = [math]::Round($after - $before,2)
          Write-Host ("Free space after cleanup: " + $after + " GB") -ForegroundColor Green
          Write-Host ("Total space reclaimed: " + $freed + " GB") -ForegroundColor Green

          if ($deleted.Count -gt 0) {
              Write-Host "Deleted items summary:"
              foreach ($d in $deleted) {
                  Write-Host (" - " + $d.Path + " (" + $d.SizeMB + " MB)")
              }
          } else {
              Write-Host "No large cache-like folders matched dynamic deletion criteria."
          }

          Write-Host "Ultra-aggressive (safe) disk cleanup finished." -ForegroundColor Cyan

          # Always return success to avoid failing pipeline due to cleanup issues
          exit 0

      - name: Ensure Ninja
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (-not (Get-Command ninja -ErrorAction SilentlyContinue)) {
              choco install ninja -y
          }

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          repository: ZeunO8/llvm-project
          ref: c-index-workaround

      - name: Write fix_format_security script to file
        shell: bash
        run: |
          cat << 'EOF' > fix_format_security.py
          #!/usr/bin/env python3
          import sys
          import os
          import re

          def fix_file(path):
              with open(path, 'rb') as f:
                  content = f.read()
              fixed_content = re.sub(rb'-Wformat\s+=format-security', b'-Wformat-security', content)
              if fixed_content != content:
                  backup_path = path + '.bak'
                  if not os.path.exists(backup_path):
                      os.rename(path, backup_path)
                  with open(path, 'wb') as f:
                      f.write(fixed_content)
                  print(f'[PATCHED] {path}')

          def main(build_dir):
              for root, _, files in os.walk(build_dir):
                  for file in files:
                      if file.endswith(('.ninja', '.make', '.mk', '.cmake')):
                          fix_file(os.path.join(root, file))

          if __name__ == '__main__':
              if len(sys.argv) != 2:
                  print('Usage: fix_format_security.py <build_dir>')
                  sys.exit(1)
              main(sys.argv[1])
          EOF
          chmod +x fix_format_security.py

      - name: Download and Extract Android NDK (bash)
        shell: bash
        run: |
          export NDK_VERSION=r27c
          export NDK_URL="https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}-windows.zip"
          export NDK_ZIP="ndk.zip"
          export NDK_DIR="$USERPROFILE/ndk/android-ndk-${NDK_VERSION}"

          mkdir -p "$USERPROFILE/ndk"
          curl -fsSL "$NDK_URL" -o "$NDK_ZIP"
          unzip -q "$NDK_ZIP" -d "$USERPROFILE/ndk"
          echo "ANDROID_NDK_ROOT=$NDK_DIR" >> "$GITHUB_ENV"

      - name: Configure LLVM
        run: |
          cd llvm
          cmake -G Ninja -B build -S . \
            -DLLVM_ENABLE_PROJECTS="clang;lld;clang-tools-extra;lldb" \
            -DCMAKE_INSTALL_PREFIX=llvm-${{ env.LLVM_VERSION }}-android-aarch64 \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_HOST_TRIPLE=x86_64-pc-windows-msvc \
            -DLLVM_TARGETS_TO_BUILD="AArch64" \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=$ANDROID_ABI -DANDROID_PLATFORM=$ANDROID_PLATFORM \
            -DLLVM_DEFAULT_TARGET_TRIPLE=aarch64-linux-android \
            -DCMAKE_C_FLAGS="-fPIC" \
            -DCMAKE_CXX_FLAGS="-fPIC" \
            -DCMAKE_EXE_LINKER_FLAGS="-ldl" \
            -DBUILD_SHARED_LIBS=OFF \
            -DLLVM_BUILD_STATIC=ON \
            -DLLDB_ENABLE_PYTHON=OFF \
            -DLLDB_ENABLE_LUA=OFF \
            -DLLDB_ENABLE_LIBXML2=OFF \
            -DLLDB_ENABLE_LZMA=OFF \
            -DLLDB_ENABLE_CURSES=OFF \
            -DLLDB_ENABLE_LIBEDIT=OFF \
            -DLLVM_BUILD_EXAMPLES=OFF -DLLVM_INCLUDE_EXAMPLES=OFF \
            -DLLVM_INCLUDE_DOCS=OFF -DLLVM_INCLUDE_UTILS=OFF \
            -DLLVM_BUILD_TESTS=OFF -DLLVM_INCLUDE_TESTS=OFF \
            -DLLVM_BUILD_BENCHMARKS=OFF -DLLVM_INCLUDE_BENCHMARKS=OFF \
            -DLLVM_ENABLE_ASSERTIONS=OFF -DCLANG_INCLUDE_TESTS=OFF -DLLDB_INCLUDE_TESTS=OFF \
            -DLIBCLANG_BUILD_STATIC=ON -DLLVM_ENABLE_PIC=OFF
        shell: bash

      - name: fix_format_security
        run: |
          python fix_format_security.py llvm/build
        shell: bash

      - name: Build LLVM
        run: |
          cd llvm
          cmake --build build --config Release

      - name: Install LLVM
        run: |
          cd llvm
          cmake --install build

      - name: Package LLVM Install Folder
        shell: bash
        run: |
          cd llvm/llvm-${{ env.LLVM_VERSION }}-android-aarch64
          tar -cvzf ../../llvm-${{ env.LLVM_VERSION }}-android-aarch64.tar.gz *

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: llvm-${{ env.LLVM_VERSION }}-android-aarch64
          path: llvm-${{ env.LLVM_VERSION }}-android-aarch64.tar.gz

